{"ast":null,"code":"import sgMail from '@sendgrid/mail';\n\n// Set your SendGrid API key\nsgMail.setApiKey('YOUR_SENDGRID_API_KEY');\nexport const sendVerificationEmail = async email => {\n  try {\n    // Generate a mock OTP\n    const otp = Math.floor(100000 + Math.random() * 900000).toString();\n    console.log(`Sending OTP ${otp} to ${email}`);\n    const msg = {\n      to: email,\n      from: 'far',\n      // Use your verified SendGrid sender email\n      subject: 'Your OTP Code',\n      text: `Your OTP code is ${otp}`,\n      html: `<strong>Your OTP code is ${otp}</strong>`\n    };\n\n    // Send the email\n    await sgMail.send(msg);\n\n    // Store the OTP in localStorage for verification (for demonstration purposes)\n    localStorage.setItem(`otp_${email}`, otp);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Failed to send verification email:', error);\n    return {\n      success: false\n    };\n  }\n};\nexport const verifyOtp = async (email, otp) => {\n  // Simulate OTP verification\n  const storedOtp = localStorage.getItem(`otp_${email}`);\n  return otp === storedOtp;\n};\nexport const createAccount = async (email, password) => {\n  // Simulate account creation\n  console.log(`Creating account for ${email}`);\n  return {\n    success: true\n  }; // Mock account creation\n};","map":{"version":3,"names":["sgMail","setApiKey","sendVerificationEmail","email","otp","Math","floor","random","toString","console","log","msg","to","from","subject","text","html","send","localStorage","setItem","success","error","verifyOtp","storedOtp","getItem","createAccount","password"],"sources":["C:/Users/farde/OneDrive/Startup/Prop-Firm/frontend/src/services/authService.js"],"sourcesContent":["import sgMail from '@sendgrid/mail';\r\n\r\n// Set your SendGrid API key\r\nsgMail.setApiKey('YOUR_SENDGRID_API_KEY');\r\n\r\nexport const sendVerificationEmail = async (email) => {\r\n  try {\r\n    // Generate a mock OTP\r\n    const otp = Math.floor(100000 + Math.random() * 900000).toString();\r\n    console.log(`Sending OTP ${otp} to ${email}`);\r\n    \r\n    const msg = {\r\n      to: email,\r\n      from: 'far', // Use your verified SendGrid sender email\r\n      subject: 'Your OTP Code',\r\n      text: `Your OTP code is ${otp}`,\r\n      html: `<strong>Your OTP code is ${otp}</strong>`,\r\n    };\r\n\r\n    // Send the email\r\n    await sgMail.send(msg);\r\n\r\n    // Store the OTP in localStorage for verification (for demonstration purposes)\r\n    localStorage.setItem(`otp_${email}`, otp);\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Failed to send verification email:', error);\r\n    return { success: false };\r\n  }\r\n};\r\n\r\nexport const verifyOtp = async (email, otp) => {\r\n  // Simulate OTP verification\r\n  const storedOtp = localStorage.getItem(`otp_${email}`);\r\n  return otp === storedOtp;\r\n};\r\n\r\nexport const createAccount = async (email, password) => {\r\n  // Simulate account creation\r\n  console.log(`Creating account for ${email}`);\r\n  return { success: true }; // Mock account creation\r\n};"],"mappings":"AAAA,OAAOA,MAAM,MAAM,gBAAgB;;AAEnC;AACAA,MAAM,CAACC,SAAS,CAAC,uBAAuB,CAAC;AAEzC,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,KAAK,IAAK;EACpD,IAAI;IACF;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAACC,QAAQ,CAAC,CAAC;IAClEC,OAAO,CAACC,GAAG,CAAC,eAAeN,GAAG,OAAOD,KAAK,EAAE,CAAC;IAE7C,MAAMQ,GAAG,GAAG;MACVC,EAAE,EAAET,KAAK;MACTU,IAAI,EAAE,KAAK;MAAE;MACbC,OAAO,EAAE,eAAe;MACxBC,IAAI,EAAE,oBAAoBX,GAAG,EAAE;MAC/BY,IAAI,EAAE,4BAA4BZ,GAAG;IACvC,CAAC;;IAED;IACA,MAAMJ,MAAM,CAACiB,IAAI,CAACN,GAAG,CAAC;;IAEtB;IACAO,YAAY,CAACC,OAAO,CAAC,OAAOhB,KAAK,EAAE,EAAEC,GAAG,CAAC;IAEzC,OAAO;MAAEgB,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO;MAAED,OAAO,EAAE;IAAM,CAAC;EAC3B;AACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOnB,KAAK,EAAEC,GAAG,KAAK;EAC7C;EACA,MAAMmB,SAAS,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAOrB,KAAK,EAAE,CAAC;EACtD,OAAOC,GAAG,KAAKmB,SAAS;AAC1B,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOtB,KAAK,EAAEuB,QAAQ,KAAK;EACtD;EACAjB,OAAO,CAACC,GAAG,CAAC,wBAAwBP,KAAK,EAAE,CAAC;EAC5C,OAAO;IAAEiB,OAAO,EAAE;EAAK,CAAC,CAAC,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}