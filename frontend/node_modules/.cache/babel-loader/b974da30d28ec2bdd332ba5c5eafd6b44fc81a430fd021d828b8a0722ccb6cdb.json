{"ast":null,"code":"const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nexport const sendVerificationEmail = async email => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/send-verification-email`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Failed to send verification email:', error);\n    return {\n      success: false\n    };\n  }\n};\nexport const verifyOtp = async (email, otp) => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/verify-otp`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        otp\n      })\n    });\n    const data = await response.json();\n    return data.success;\n  } catch (error) {\n    console.error('Failed to verify OTP:', error);\n    return false;\n  }\n};\nexport const createAccount = async (email, password) => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/sign-up`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Failed to create account:', error);\n    return {\n      success: false\n    };\n  }\n};\nexport const checkEmail = async email => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/check-email`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Failed to check email:', error);\n    return {\n      exists: false\n    };\n  }\n};\nexport const signInWithGoogle = async email => {\n  // Simulate sign-in with Google\n  console.log(`Signing in with Google email: ${email}`);\n  // Mock response\n  if (email === 'test@example.com') {\n    return {\n      success: true\n    };\n  } else {\n    return {\n      success: false\n    };\n  }\n};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","sendVerificationEmail","email","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","success","verifyOtp","otp","createAccount","password","checkEmail","exists","signInWithGoogle","log"],"sources":["C:/Users/farde/OneDrive/Startup/Prop-Firm/frontend/src/services/authService.js"],"sourcesContent":["const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\r\n\r\nexport const sendVerificationEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/send-verification-email`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to send verification email:', error);\r\n    return { success: false };\r\n  }\r\n};\r\n\r\nexport const verifyOtp = async (email, otp) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/verify-otp`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, otp }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data.success;\r\n  } catch (error) {\r\n    console.error('Failed to verify OTP:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const createAccount = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/sign-up`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to create account:', error);\r\n    return { success: false };\r\n  }\r\n};\r\n\r\nexport const checkEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/check-email`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to check email:', error);\r\n    return { exists: false };\r\n  }\r\n};\r\n\r\nexport const signInWithGoogle = async (email) => {\r\n  // Simulate sign-in with Google\r\n  console.log(`Signing in with Google email: ${email}`);\r\n  // Mock response\r\n  if (email === 'test@example.com') {\r\n    return { success: true };\r\n  } else {\r\n    return { success: false };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}