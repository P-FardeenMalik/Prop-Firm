{"ast":null,"code":"export const sendVerificationEmail = async email => {\n  try {\n    const response = await fetch('http://localhost:5000/send-verification-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Failed to send verification email:', error);\n    return {\n      success: false\n    };\n  }\n};\nexport const verifyOtp = async (email, otp) => {\n  try {\n    const response = await fetch('http://localhost:5000/verify-otp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        otp\n      })\n    });\n    const data = await response.json();\n    return data.success;\n  } catch (error) {\n    console.error('Failed to verify OTP:', error);\n    return false;\n  }\n};\nexport const createAccount = async (email, password) => {\n  // Simulate account creation\n  console.log(`Creating account for ${email}`);\n  return {\n    success: true\n  }; // Mock account creation\n};\nexport const signInWithEmail = async (email, password) => {\n  // Simulate sign-in with email and password\n  console.log(`Signing in with email: ${email}`);\n  // Mock response\n  if (email === 'test@example.com' && password === 'password') {\n    return {\n      success: true\n    };\n  } else {\n    return {\n      success: false\n    };\n  }\n};\nexport const signInWithGoogle = async email => {\n  // Simulate sign-in with Google\n  console.log(`Signing in with Google email: ${email}`);\n  // Mock response\n  if (email === 'test@example.com') {\n    return {\n      success: true\n    };\n  } else {\n    return {\n      success: false\n    };\n  }\n};","map":{"version":3,"names":["sendVerificationEmail","email","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","success","verifyOtp","otp","createAccount","password","log","signInWithEmail","signInWithGoogle"],"sources":["C:/Users/farde/OneDrive/Startup/Prop-Firm/frontend/src/services/authService.js"],"sourcesContent":["export const sendVerificationEmail = async (email) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/send-verification-email', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Failed to send verification email:', error);\r\n      return { success: false };\r\n    }\r\n  };\r\n  \r\n  export const verifyOtp = async (email, otp) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/verify-otp', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, otp }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      return data.success;\r\n    } catch (error) {\r\n      console.error('Failed to verify OTP:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  export const createAccount = async (email, password) => {\r\n    // Simulate account creation\r\n    console.log(`Creating account for ${email}`);\r\n    return { success: true }; // Mock account creation\r\n  };\r\n  \r\n  export const signInWithEmail = async (email, password) => {\r\n    // Simulate sign-in with email and password\r\n    console.log(`Signing in with email: ${email}`);\r\n    // Mock response\r\n    if (email === 'test@example.com' && password === 'password') {\r\n      return { success: true };\r\n    } else {\r\n      return { success: false };\r\n    }\r\n  };\r\n  \r\n  export const signInWithGoogle = async (email) => {\r\n    // Simulate sign-in with Google\r\n    console.log(`Signing in with Google email: ${email}`);\r\n    // Mock response\r\n    if (email === 'test@example.com') {\r\n      return { success: true };\r\n    } else {\r\n      return { success: false };\r\n    }\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAG,MAAOC,KAAK,IAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;MAC5EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAM,CAAC;IAChC,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO;MAAEE,OAAO,EAAE;IAAM,CAAC;EAC3B;AACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOb,KAAK,EAAEc,GAAG,KAAK;EAC7C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,KAAK;QAAEc;MAAI,CAAC;IACrC,CAAC,CAAC;IAEF,MAAMN,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACI,OAAO;EACrB,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAOf,KAAK,EAAEgB,QAAQ,KAAK;EACtD;EACAL,OAAO,CAACM,GAAG,CAAC,wBAAwBjB,KAAK,EAAE,CAAC;EAC5C,OAAO;IAAEY,OAAO,EAAE;EAAK,CAAC,CAAC,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMM,eAAe,GAAG,MAAAA,CAAOlB,KAAK,EAAEgB,QAAQ,KAAK;EACxD;EACAL,OAAO,CAACM,GAAG,CAAC,0BAA0BjB,KAAK,EAAE,CAAC;EAC9C;EACA,IAAIA,KAAK,KAAK,kBAAkB,IAAIgB,QAAQ,KAAK,UAAU,EAAE;IAC3D,OAAO;MAAEJ,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,MAAM;IACL,OAAO;MAAEA,OAAO,EAAE;IAAM,CAAC;EAC3B;AACF,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAOnB,KAAK,IAAK;EAC/C;EACAW,OAAO,CAACM,GAAG,CAAC,iCAAiCjB,KAAK,EAAE,CAAC;EACrD;EACA,IAAIA,KAAK,KAAK,kBAAkB,EAAE;IAChC,OAAO;MAAEY,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,MAAM;IACL,OAAO;MAAEA,OAAO,EAAE;IAAM,CAAC;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}