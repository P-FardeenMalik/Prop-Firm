{"ast":null,"code":"const BACKEND_URL=process.env.REACT_APP_BACKEND_URL;export const sendVerificationEmail=async email=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/send-verification-email\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});const data=await response.json();return data;}catch(error){console.error('Failed to send verification email:',error);return{success:false};}};export const verifyOtp=async(email,otp)=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/verify-otp\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,otp})});const data=await response.json();return data.success;}catch(error){console.error('Failed to verify OTP:',error);return false;}};export const createAccount=async(email,password)=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/sign-up\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();return data;}catch(error){console.error('Failed to create account:',error);return{success:false};}};export const checkEmail=async email=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/check-email\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});const data=await response.json();return data;}catch(error){console.error('Failed to check email:',error);return{exists:false};}};export const signInWithEmail=async(email,password)=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/sign-in\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();return data;}catch(error){console.error('Failed to sign in:',error);return{success:false,message:'Failed to sign in'};}};export const signInWithGoogle=async email=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/sign-in-google\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});const data=await response.json();return data;}catch(error){console.error('Failed to sign in with Google:',error);return{success:false,message:'Failed to sign in with Google'};}};export const sendPasswordResetEmail=async email=>{try{const response=await fetch(\"\".concat(BACKEND_URL,\"/send-password-reset-email\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});const data=await response.json();return data;}catch(error){console.error('Failed to send password reset email:',error);return{success:false};}};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","sendVerificationEmail","email","response","fetch","concat","method","headers","body","JSON","stringify","data","json","error","console","success","verifyOtp","otp","createAccount","password","checkEmail","exists","signInWithEmail","message","signInWithGoogle","sendPasswordResetEmail"],"sources":["C:/Users/farde/OneDrive/Startup/Prop-Firm/frontend/src/services/authService.js"],"sourcesContent":["const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\r\n\r\nexport const sendVerificationEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/send-verification-email`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to send verification email:', error);\r\n    return { success: false };\r\n  }\r\n};\r\n\r\nexport const verifyOtp = async (email, otp) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/verify-otp`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, otp }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data.success;\r\n  } catch (error) {\r\n    console.error('Failed to verify OTP:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const createAccount = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/sign-up`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to create account:', error);\r\n    return { success: false };\r\n  }\r\n};\r\n\r\nexport const checkEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/check-email`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to check email:', error);\r\n    return { exists: false };\r\n  }\r\n};\r\n\r\nexport const signInWithEmail = async (email, password) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/sign-in`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to sign in:', error);\r\n    return { success: false, message: 'Failed to sign in' };\r\n  }\r\n};\r\n\r\nexport const signInWithGoogle = async (email) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/sign-in-google`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to sign in with Google:', error);\r\n    return { success: false, message: 'Failed to sign in with Google' };\r\n  }\r\n};\r\n\r\nexport const sendPasswordResetEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`${BACKEND_URL}/send-password-reset-email`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to send password reset email:', error);\r\n    return { success: false };\r\n  }};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}